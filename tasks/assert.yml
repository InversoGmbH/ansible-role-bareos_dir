---

- name: assert | Test if bareos_dir_hostname is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_hostname is defined
      - bareos_dir_hostname is string
      - bareos_dir_hostname is not none
    quiet: yes

- name: assert | Test if bareos_dir_password is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_password is defined
      - bareos_dir_password is string
      - bareos_dir_password is not none
    quiet: yes

- name: assert | Test if bareos_dir_queryfile is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_queryfile is defined
      - bareos_dir_queryfile is string
      - bareos_dir_queryfile is not none
    quiet: yes

- name: assert | Test if bareos_dir_max_concurrent_jobs is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_max_concurrent_jobs is defined
      - bareos_dir_max_concurrent_jobs is number
    quiet: yes

- name: assert | Test if bareos_dir_tls_enable is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_tls_enable is defined
      - bareos_dir_tls_enable is boolean
    quiet: yes

- name: assert | Test if bareos_dir_tls_verify_peer is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_tls_verify_peer is defined
      - bareos_dir_tls_verify_peer is boolean
    quiet: yes

- name: assert | Test if bareos_dir_storages is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_storages is iterable
      - bareos_dir_storages is not none
    quiet: yes
  when:
    - bareos_dir_storages is defined

- name: assert | Test if items in bareos_dir_storages are set correctly when enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.address is defined
      - item.address is string
      - item.address is not none
      - item.password is defined
      - item.password is string
      - item.password is not none
      - item.device is defined
      - item.device is string
      - item.device is not none
      - item.media_type is defined
      - item.media_type is string
      - item.media_type is not none
      - item.tls_enable is defined
      - item.tls_enable is boolean
      - item.tls_verify_peer is defined
      - item.tls_verify_peer is boolean
    quiet: yes
  loop: "{{ bareos_dir_storages }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_storages is defined
    - item.enabled is not defined or
      (item.enabled is defined and item.enabled)

- name: assert | Test if items in bareos_dir_storages are set correctly when not enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.enabled is defined
      - item.enabled is boolean
    quiet: yes
  loop: "{{ bareos_dir_storages }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_storages is defined
    - item.enabled is defined
    - not item.enabled

- name: assert | Test if bareos_dir_message is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_message is defined
      - bareos_dir_message is string
      - bareos_dir_message is not none
    quiet: yes

- name: assert | Test if bareos_dir_clients is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_clients is iterable
      - bareos_dir_clients is not none
    quiet: yes
  when:
    - bareos_dir_clients is defined

- name: assert | Test if items in bareos_dir_clients are set correctly when enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.address is defined
      - item.address is string
      - item.address is not none
      - item.password is defined
      - item.password is string
      - item.password is not none
    quiet: yes
  loop: "{{ bareos_dir_clients }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_clients is defined
    - item.enabled is not defined or
      (item.enabled is defined and item.enabled)

- name: assert | Test if tls_enable in bareos_dir_clients is set correctly
  ansible.builtin.assert:
    that:
      - item.tls_enable is boolean
    quiet: yes
  loop: "{{ bareos_dir_clients }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_clients is defined
    - item.tls_enable is defined

- name: assert | Test if tls_verify_peer in bareos_dir_clients is set correctly
  ansible.builtin.assert:
    that:
      - item.tls_verify_peer is boolean
    quiet: yes
  loop: "{{ bareos_dir_clients }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_clients is defined
    - item.tls_verify_peer is defined

- name: assert | Test if items in bareos_dir_clients are set correctly when not enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.enabled is defined
      - item.enabled is boolean
    quiet: yes
  loop: "{{ bareos_dir_clients }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_clients is defined
    - item.enabled is defined
    - not item.enabled

- name: assert | Test if bareos_dir_messages is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_messages is iterable
    quiet: yes
  when:
    - bareos_dir_messages is defined

- name: assert | Test if items in bareos_dir_messages are set correctly when enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.description is defined
      - item.description is string
      - item.description is not none
    quiet: yes
  loop: "{{ bareos_dir_messages }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_messages is defined
    - item.enabled is not defined or
      (item.enabled is defined and item.enabled)

- name: assert | Test if item.append in bareos_dir_messages are set correctly
  ansible.builtin.assert:
    that:
      - item.append is mapping
      - item.append.file is defined
      - item.append.file is string
      - item.append.file is not none
      - item.append.messages is defined
      - item.append.messages is iterable
    quiet: yes
  loop: "{{ bareos_dir_messages }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_messages is defined
    - item.enabled is not defined or
      (item.enabled is defined and item.enabled)
    - item.append is defined

- name: assert | Test if item.console in bareos_dir_messages are set correctly
  ansible.builtin.assert:
    that:
      - item.console is iterable
    quiet: yes
  loop: "{{ bareos_dir_messages }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_messages is defined
    - item.enabled is not defined or
      (item.enabled is defined and item.enabled)
    - item.console is defined

- name: assert | Test if items in bareos_dir_messages are set correctly when not enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.enabled is defined
      - item.enabled is boolean
    quiet: yes
  loop: "{{ bareos_dir_messages }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_messages is defined
    - item.enabled is defined
    - not item.enabled

- name: assert | Test if bareos_dir_profiles is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_profiles is iterable
      - bareos_dir_profiles is not none
    quiet: yes
  when:
    - bareos_dir_profiles is defined

- name: assert | Test if items in bareos_dir_profiles are set correctly when enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.jobacl is defined
      - item.jobacl is iterable
      - item.clientacl is defined
      - item.clientacl is iterable
      - item.storageacl is defined
      - item.storageacl is iterable
      - item.scheduleacl is defined
      - item.scheduleacl is iterable
      - item.poolacl is defined
      - item.poolacl is iterable
      - item.commandacl is defined
      - item.commandacl is iterable
      - item.filesetacl is defined
      - item.filesetacl is iterable
      - item.catalogacl is defined
      - item.catalogacl is iterable
      - item.whereacl is defined
      - item.whereacl is iterable
      - item.pluginoptionsacl is defined
      - item.pluginoptionsacl is iterable
    quiet: yes
  loop: "{{ bareos_dir_profiles }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_profiles is defined
    - item.enabled is not defined or
      (item.enabled is defined and item.enabled)

- name: assert | Test if item.append in bareos_dir_profiles are set correctly
  ansible.builtin.assert:
    that:
      - item.append is mapping
    quiet: yes
  loop: "{{ bareos_dir_profiles }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_profiles is defined
    - item.enabled is not defined or
      (item.enabled is defined and item.enabled)
    - item.append is defined

- name: assert | Test if items in bareos_dir_profiles are set correctly when not enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.enabled is defined
      - item.enabled is boolean
    quiet: yes
  loop: "{{ bareos_dir_profiles }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_profiles is defined
    - item.enabled is defined
    - not item.enabled

- name: assert | Test if bareos_dir_jobs is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_jobs is iterable
      - bareos_dir_jobs is not none
    quiet: yes
  when:
    - bareos_dir_jobs is defined

- name: assert | Test if items in bareos_dir_jobs are set correctly when enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.description is defined
      - item.description is string
      - item.description is not none
      - item.pool is defined
      - item.pool is string
      - item.pool is not none
      - item.type is defined
      - item.type is string
      - item.type is not none
      - item.type in [ "Backup", "Restore", "Verify", "Admin", "Migrate", "Copy", "Consolidate" ]
      - item.client is defined
      - item.client is string
      - item.client is not none
      - item.fileset is defined
      - item.fileset is string
      - item.fileset is not none
      - item.storage is defined
      - item.storage is string
      - item.storage is not none
      - item.messages is defined
      - item.messages is string
      - item.messages is not none
    quiet: yes
  loop: "{{ bareos_dir_jobs }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_jobs is defined
    - item.enabled is not defined or
      (item.enabled is defined and item.enabled)

- name: assert | Test if items in bareos_dir_jobs are set correctly when not enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.enabled is defined
      - item.enabled is boolean
    quiet: yes
  loop: "{{ bareos_dir_jobs }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_jobs is defined
    - item.enabled is defined
    - not item.enabled

- name: assert | Test if bareos_dir_pools is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_pools is iterable
      - bareos_dir_pools is not none
    quiet: yes
  when:
    - bareos_dir_pools is defined

- name: assert | Test if items in bareos_dir_pools are set correctly when enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.pool_type is defined
      - item.pool_type is string
      - item.pool_type is not none
      - item.pool_type in [ "Backup", "Archive", "Cloned", "Migration", "Copy", "Save" ]
      - item.recycle is defined
      - item.recycle is boolean
      - item.autoprune is defined
      - item.autoprune is boolean
      - item.volume_retention is defined
      - item.volume_retention is string
      - item.volume_retention is not none
      - item.maximum_volume_bytes is defined
      - item.maximum_volume_bytes is string
      - item.maximum_volume_bytes is not none
      - item.maximum_volumes is defined
      - item.maximum_volumes is number
      - item.label_format is defined
      - item.label_format is string
      - item.label_format is not none
    quiet: yes
  loop: "{{ bareos_dir_pools }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_pools is defined
    - item.enabled is not defined or
      (item.enabled is defined and item.enabled)

- name: assert | Test if items in bareos_dir_pools are set correctly when not enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.enabled is defined
      - item.enabled is boolean
    quiet: yes
  loop: "{{ bareos_dir_pools }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_pools is defined
    - item.enabled is defined
    - not item.enabled

- name: assert | Test if bareos_dir_filesets is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_filesets is iterable
      - bareos_dir_filesets is not none
    quiet: yes
  when:
    - bareos_dir_filesets is defined

- name: assert | Test if items in bareos_dir_filesets are set correctly when enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.include is defined
      - item.include is mapping
      - item.include.files is defined
      - item.include.files is iterable
      - item.include.files is not none
      - item.include.options is defined
      - item.include.options is mapping
      - item.include.options is not none
      - item.include.options.fs_types is defined
      - item.include.options.fs_types is iterable
      - item.include.options.fs_types is not none
      - item.exclude is defined
      - item.exclude is mapping
      - item.exclude.files is defined
      - item.exclude.files is iterable
      - item.exclude.files is not none
    quiet: yes
  loop: "{{ bareos_dir_filesets }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_filesets is defined
    - item.enabled is not defined or
      (item.enabled is defined and item.enabled)

- name: assert | Test if items in bareos_dir_filesets are set correctly when not enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.enabled is defined
      - item.enabled is boolean
    quiet: yes
  loop: "{{ bareos_dir_filesets }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_filesets is defined
    - item.enabled is defined
    - not item.enabled

- name: assert | Test if bareos_dir_jobdefs is set correctly
  ansible.builtin.assert:
    that:
      - bareos_dir_jobdefs is iterable
      - bareos_dir_jobdefs is not none
    quiet: yes
  when:
    - bareos_dir_jobdefs is defined

- name: assert | Test if items in bareos_dir_jobdefs are set correctly when enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.level is defined
      - item.level is string
      - item.level is not none
      - item.level in [ "Full", "Incremental", "Differential", "VirtualFull" ]
      - item.fileset is defined
      - item.fileset is string
      - item.fileset is not none
      - item.schedule is defined
      - item.schedule is string
      - item.schedule is not none
      - item.storage is defined
      - item.storage is string
      - item.storage is not none
      - item.messages is defined
      - item.messages is string
      - item.messages is not none
      - item.pool is defined
      - item.pool is string
      - item.pool is not none
      - item.priority is defined
      - item.priority is number
      - item.write_bootstrap is defined
      - item.write_bootstrap is string
      - item.write_bootstrap is not none
      - item.full_backup_pool is defined
      - item.full_backup_pool is string
      - item.full_backup_pool is not none
      - item.differential_backup_pool is defined
      - item.differential_backup_pool is string
      - item.differential_backup_pool is not none
      - item.incremental_backup_pool is defined
      - item.incremental_backup_pool is string
      - item.incremental_backup_pool is not none
    quiet: yes
  loop: "{{ bareos_dir_jobdefs }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_jobdefs is defined
    - item.enabled is not defined or
      (item.enabled is defined and item.enabled)

- name: assert | Test if items in bareos_dir_jobdefs are set correctly when not enabled
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.enabled is defined
      - item.enabled is boolean
    quiet: yes
  loop: "{{ bareos_dir_jobdefs }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - bareos_dir_jobdefs is defined
    - item.enabled is defined
    - not item.enabled
